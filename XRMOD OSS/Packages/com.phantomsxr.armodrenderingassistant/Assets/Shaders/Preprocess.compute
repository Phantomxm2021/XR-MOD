#pragma kernel Preprocess

// Input image size defined by neural network model.
int _imageSizeWidth;
int _imageSizeHeight;

sampler2D _inputTexture;
RWStructuredBuffer<float> _output;

// Resize `_inputTexture` texture to network model input image size.
[numthreads(8, 8, 1)]
void Preprocess(uint3 id : SV_DispatchThreadID)
{
    // Caluculate vertically flipped UV.
    const float2 uv = float2( _imageSizeHeight - 0.5 - id.y,0.5 + id.x) / _imageSizeHeight;

    // Caluculate vertically flipped UV gradients.
    const float2 duv_dx = float2(1.0 / _imageSizeWidth, 0);
    const float2 duv_dy = float2(0, -1.0 / _imageSizeHeight);
    
    // Texture sample
    float3 rgb = tex2Dgrad(_inputTexture, uv, duv_dx, duv_dy).rgb;
    
    // Generate output buffer
    const uint offs = (id.y * _imageSizeHeight + id.x) * 3;
    _output[offs + 0] = rgb.r;
    _output[offs + 1] = rgb.g;
    _output[offs + 2] = rgb.b;


    
}