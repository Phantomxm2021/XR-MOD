// // /*===============================================================================
// // Copyright (C) 2020 PhantomsXR Ltd. All Rights Reserved.
// //
// // This file is part of the AR-MOD SDK.
// //
// // The AR-MOD SDK cannot be copied, distributed, or made available to
// // third-parties for commercial purposes without written permission of PhantomsXR Ltd.
// //
// // Contact info@phantomsxr.com for licensing requests.
// // ===============================================================================*/

using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.ARFoundation;

namespace HandheldARModule.Runtime.Extension
{
    /// <summary>
    /// This plane visualizer demonstrates the use of a feathering effect
    /// at the edge of the detected plane, which reduces the visual impression
    /// of a hard edge.
    /// </summary>
    [RequireComponent(typeof(ARPlaneMeshVisualizer), typeof(MeshRenderer), typeof(ARPlane))]
    public class ARFeatheredPlaneMeshVisualizer : MonoBehaviour
    {
        [Tooltip("The width of the texture feathering (in world units).")] [SerializeField]
        float FeatheringWidth = 0.2f;

        static readonly List<Vector3> FEATHERING_U_VS = new List<Vector3>();

        static readonly List<Vector3> VERTICES = new List<Vector3>();

        ARPlaneMeshVisualizer planeMeshVisualizer;

        ARPlane plane;

        Material featheredPlaneMaterial;

        /// <summary>
        /// The width of the texture feathering (in world units).
        /// </summary>
        public float GetFeatheringWidth
        {
            get => FeatheringWidth;
            set => FeatheringWidth = value;
        }

        void Awake()
        {
            planeMeshVisualizer = GetComponent<ARPlaneMeshVisualizer>();
            featheredPlaneMaterial = GetComponent<MeshRenderer>().material;
            plane = GetComponent<ARPlane>();
        }

        void OnEnable()
        {
            plane.boundaryChanged += ARPlane_boundaryUpdated;
        }

        void OnDisable()
        {
            plane.boundaryChanged -= ARPlane_boundaryUpdated;
        }

        void ARPlane_boundaryUpdated(ARPlaneBoundaryChangedEventArgs eventArgs)
        {
            GenerateBoundaryUVs(planeMeshVisualizer.mesh);
        }

        /// <summary>
        /// Generate UV2s to mark the boundary vertices and feathering UV coords.
        /// </summary>
        /// <remarks>
        /// The <c>ARPlaneMeshVisualizer</c> has a <c>meshUpdated</c> event that can be used to modify the generated
        /// mesh. In this case we'll add UV2s to mark the boundary vertices.
        /// This technique avoids having to generate extra vertices for the boundary. It works best when the plane is
        /// is fairly uniform.
        /// </remarks>
        /// <param name="mesh">The <c>Mesh</c> generated by <c>ARPlaneMeshVisualizer</c></param>
        void GenerateBoundaryUVs(Mesh mesh)
        {
            int vertexCount = mesh.vertexCount;

            // Reuse the list of UVs
            FEATHERING_U_VS.Clear();
            if (FEATHERING_U_VS.Capacity < vertexCount)
            {
                FEATHERING_U_VS.Capacity = vertexCount;
            }

            mesh.GetVertices(VERTICES);

            Vector3 centerInPlaneSpace = VERTICES[VERTICES.Count - 1];
            Vector3 uv = new Vector3(0, 0, 0);
            float shortestUVMapping = float.MaxValue;

            // Assume the last vertex is the center vertex.
            for (int i = 0; i < vertexCount - 1; i++)
            {
                float vertexDist = Vector3.Distance(VERTICES[i], centerInPlaneSpace);

                // Remap the UV so that a UV of "1" marks the feathering boudary.
                // The ratio of featherBoundaryDistance/edgeDistance is the same as featherUV/edgeUV.
                // Rearrange to get the edge UV.
                float uvMapping = vertexDist / Mathf.Max(vertexDist - GetFeatheringWidth, 0.001f);
                uv.x = uvMapping;

                // All the UV mappings will be different. In the shader we need to know the UV value we need to fade out by.
                // Choose the shortest UV to guarentee we fade out before the border.
                // This means the feathering widths will be slightly different, we again rely on a fairly uniform plane.
                if (shortestUVMapping > uvMapping)
                {
                    shortestUVMapping = uvMapping;
                }

                FEATHERING_U_VS.Add(uv);
            }

            featheredPlaneMaterial.SetFloat("_ShortestUVMapping", shortestUVMapping);

            // Add the center vertex UV
            uv.Set(0, 0, 0);
            FEATHERING_U_VS.Add(uv);

            mesh.SetUVs(1, FEATHERING_U_VS);
            mesh.UploadMeshData(false);
        }
    }
}